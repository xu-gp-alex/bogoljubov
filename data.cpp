#include "data.hpp"

// notes: pieces[0][0] should be the white, a-rook. 
u8 pieces[64];
u8 init[64] = {
    wR, wN, wB, wQ, wK, wB, wN, wR,
    wP, wP, wP, wP, wP, wP, wP, wP, 
    0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 
    0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 
    0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 
    0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 
    bP, bP, bP, bP, bP, bP, bP, bP, 
    bR, bN, bB, bQ, bK, bB, bN, bR
};
// testing
u8 test[64] = {
    wR, 0 , 0 , 0 , wK, 0 , 0 , wR,
    0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 
    0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 
    0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 
    0 , 0 , 0 , 0 , 0 , 0 , 0 , bP, 
    0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 
    0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 
    bR, 0 , 0 , bK, 0 , 0 , 0 , bR
};

// todo: implement bitboard-esque soln
u64 white_pieces;
u64 black_pieces;
// notes: good performance-wise?
const u64 rook_masks[64] = {
    (u64) 0x101010101017e, 
    (u64) 0x202020202027c, 
    (u64) 0x404040404047a, 
    (u64) 0x8080808080876, 
    (u64) 0x1010101010106e, 
    (u64) 0x2020202020205e, 
    (u64) 0x4040404040403e, 
    (u64) 0x8080808080807e, 
    (u64) 0x1010101017e00, 
    (u64) 0x2020202027c00, 
    (u64) 0x4040404047a00, 
    (u64) 0x8080808087600, 
    (u64) 0x10101010106e00, 
    (u64) 0x20202020205e00, 
    (u64) 0x40404040403e00, 
    (u64) 0x80808080807e00, 
    (u64) 0x10101017e0100, 
    (u64) 0x20202027c0200, 
    (u64) 0x40404047a0400, 
    (u64) 0x8080808760800, 
    (u64) 0x101010106e1000, 
    (u64) 0x202020205e2000, 
    (u64) 0x404040403e4000, 
    (u64) 0x808080807e8000, 
    (u64) 0x101017e010100, 
    (u64) 0x202027c020200, 
    (u64) 0x404047a040400, 
    (u64) 0x8080876080800, 
    (u64) 0x1010106e101000, 
    (u64) 0x2020205e202000, 
    (u64) 0x4040403e404000, 
    (u64) 0x8080807e808000, 
    (u64) 0x1017e01010100, 
    (u64) 0x2027c02020200, 
    (u64) 0x4047a04040400, 
    (u64) 0x8087608080800, 
    (u64) 0x10106e10101000, 
    (u64) 0x20205e20202000, 
    (u64) 0x40403e40404000, 
    (u64) 0x80807e80808000, 
    (u64) 0x17e0101010100, 
    (u64) 0x27c0202020200, 
    (u64) 0x47a0404040400, 
    (u64) 0x8760808080800, 
    (u64) 0x106e1010101000, 
    (u64) 0x205e2020202000, 
    (u64) 0x403e4040404000, 
    (u64) 0x807e8080808000, 
    (u64) 0x7e010101010100, 
    (u64) 0x7c020202020200, 
    (u64) 0x7a040404040400, 
    (u64) 0x76080808080800, 
    (u64) 0x6e101010101000, 
    (u64) 0x5e202020202000, 
    (u64) 0x3e404040404000, 
    (u64) 0x7e808080808000, 
    (u64) 0x7e01010101010100, 
    (u64) 0x7c02020202020200, 
    (u64) 0x7a04040404040400, 
    (u64) 0x7608080808080800, 
    (u64) 0x6e10101010101000, 
    (u64) 0x5e20202020202000, 
    (u64) 0x3e40404040404000, 
    (u64) 0x7e80808080808000,
};
const u64 bishop_masks[64] = {
    (u64) 0x40201008040200, 
    (u64) 0x402010080400, 
    (u64) 0x4020100a00, 
    (u64) 0x40221400, 
    (u64) 0x2442800, 
    (u64) 0x204085000, 
    (u64) 0x20408102000, 
    (u64) 0x2040810204000, 
    (u64) 0x20100804020000, 
    (u64) 0x40201008040000, 
    (u64) 0x4020100a0000, 
    (u64) 0x4022140000, 
    (u64) 0x244280000, 
    (u64) 0x20408500000, 
    (u64) 0x2040810200000, 
    (u64) 0x4081020400000, 
    (u64) 0x10080402000200, 
    (u64) 0x20100804000400, 
    (u64) 0x4020100a000a00, 
    (u64) 0x402214001400, 
    (u64) 0x24428002800, 
    (u64) 0x2040850005000, 
    (u64) 0x4081020002000, 
    (u64) 0x8102040004000, 
    (u64) 0x8040200020400, 
    (u64) 0x10080400040800, 
    (u64) 0x20100a000a1000, 
    (u64) 0x40221400142200, 
    (u64) 0x2442800284400, 
    (u64) 0x4085000500800, 
    (u64) 0x8102000201000, 
    (u64) 0x10204000402000, 
    (u64) 0x4020002040800, 
    (u64) 0x8040004081000, 
    (u64) 0x100a000a102000, 
    (u64) 0x22140014224000, 
    (u64) 0x44280028440200, 
    (u64) 0x8500050080400, 
    (u64) 0x10200020100800, 
    (u64) 0x20400040201000, 
    (u64) 0x2000204081000, 
    (u64) 0x4000408102000, 
    (u64) 0xa000a10204000, 
    (u64) 0x14001422400000, 
    (u64) 0x28002844020000, 
    (u64) 0x50005008040200, 
    (u64) 0x20002010080400, 
    (u64) 0x40004020100800, 
    (u64) 0x20408102000, 
    (u64) 0x40810204000, 
    (u64) 0xa1020400000, 
    (u64) 0x142240000000, 
    (u64) 0x284402000000, 
    (u64) 0x500804020000, 
    (u64) 0x201008040200, 
    (u64) 0x402010080400, 
    (u64) 0x2040810204000, 
    (u64) 0x4081020400000, 
    (u64) 0xa102040000000, 
    (u64) 0x14224000000000, 
    (u64) 0x28440200000000, 
    (u64) 0x50080402000000, 
    (u64) 0x20100804020000, 
    (u64) 0x40201008040200
};
u64 rook_magics[64];
u64 bishop_magics[64];
u64 rook_moves[64][1 << 12];
// u64 bishop_moves[64][1 << 12];

u32 ply;
u8 side;